/**
  ******************************************************************************
  * @file    main.c
  * @author  Ac6
  * @version V1.0
  * @date    01-December-2013
  * @brief   Default main function.
  ******************************************************************************
*/


#include "stm32f4xx.h"

#include "FreeRTOS.h"
#include "task.h"

#include "string.h"
#include <stdint.h>

#define TRUE 		1
#define FALSE 		0
#define PRESSED		TRUE
#define NOT_PRESSED	FALSE
			
static void prvSetupUART2(void);
static void prvSetupHardware(void);
void printMessage(char *msg);
static void prvSetupGpio(void);

void led_task_handler(void *params);
void button_task_handler(void *params);

uint8_t button_status_flag = NOT_PRESSED;

char usr_msg[100];

TaskHandle_t xTaskHandle1;

int main(void)
{
	// 1. reset RCC clock configuration to the default reset state
	// HSI on, PLL off, HSE off, system_clock = 16mhz, core_clock = 16mhz
	RCC_DeInit();

	// 2. update the SystemCoreClock variable
	SystemCoreClockUpdate();

	// 2.1 Send data string using uart2 to debugger of ide
	prvSetupHardware();

	xTaskCreate(led_task_handler, "LED-TASK", 500, NULL, 1, &xTaskHandle1);
	xTaskCreate(button_task_handler, "BUTTON-TASK", 500, NULL, 1, NULL);

	vTaskStartScheduler();

	for(;;);
}

void led_task_handler(void *params)
{
	while (1)
	{
		if (xTaskNotifyWait(0, 0, NULL, portMAX_DELAY) == pdTRUE)
		{
			GPIO_ToggleBits(GPIOA, GPIO_Pin_5);
			sprintf(usr_msg, "Notification is received\r\n");
			printMessage(usr_msg);
		}

	}
}

void button_task_handler(void *params)
{
	while (1)
	{
		if (! GPIO_ReadInputDataBit(GPIOC, GPIO_Pin_13))
		{
			// button pressed

			// button debounce delay (100ms)
			rtos_delay(100);

			// send notification to other task
			xTaskNotify(xTaskHandle1, 0x0, eNoAction);
		}

	}
}

static void prvSetupUART2(void)
{
	// 1. Enable the GPOIA and UART2 peripheral clock
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);

	// UART2_TX -> PA2
	// UART2_RX -> PA3
	// 2. GPIO pins configuration
	GPIO_InitTypeDef gpioa_uart_pins;
	memset(&gpioa_uart_pins, 0, sizeof(gpioa_uart_pins));
	gpioa_uart_pins.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_2;
	gpioa_uart_pins.GPIO_Mode = GPIO_Mode_AF;
	gpioa_uart_pins.GPIO_PuPd = GPIO_PuPd_UP;
	GPIO_Init(GPIOA, &gpioa_uart_pins);

	// 3. Set AF mode for pa2 and pa3
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_USART2);
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_USART2);

	// 4. USART parameter initialization
	USART_InitTypeDef usart2_init;
	memset(&usart2_init, 0, sizeof(usart2_init));
	usart2_init.USART_BaudRate = 115200;
	usart2_init.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
	usart2_init.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
	usart2_init.USART_Parity = USART_Parity_No;
	usart2_init.USART_StopBits = USART_StopBits_1;
	usart2_init.USART_WordLength = USART_WordLength_8b;
	USART_Init(USART2, &usart2_init);

	// 5. Enable the USART2 peripheral
	USART_Cmd(USART2, ENABLE);
}

static void prvSetupGpio(void)
{
	// Enable port a and port c peripheral
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);

	GPIO_InitTypeDef led_init, button_init;

	// configure gpio pin used by led
	led_init.GPIO_Mode = GPIO_Mode_OUT;
	led_init.GPIO_OType = GPIO_OType_PP;
	led_init.GPIO_PuPd = GPIO_PuPd_NOPULL;
	led_init.GPIO_Speed = GPIO_Low_Speed;
	led_init.GPIO_Pin = GPIO_Pin_5;

	GPIO_Init(GPIOA, &led_init);

	// configure gpio pin used by button
	button_init.GPIO_Mode = GPIO_Mode_IN;
	button_init.GPIO_OType = GPIO_OType_PP;
	button_init.GPIO_PuPd = GPIO_PuPd_NOPULL;
	button_init.GPIO_Speed = GPIO_Low_Speed;
	button_init.GPIO_Pin = GPIO_Pin_13;

	GPIO_Init(GPIOC, &button_init);
}

static void prvSetupHardware(void)
{
	// setup gpio pins for led and button
	prvSetupGpio();

	// setup UART2
	prvSetupUART2();
}

void printMessage(char *msg)
{
	for (uint32_t i = 0; i < strlen(msg); ++i)
	{
		while (USART_GetFlagStatus(USART2, USART_FLAG_TXE) != SET);
		USART_SendData(USART2, msg[i]);
	}
}

void rtos_delay(uint32_t delay_in_ms)
{
	uin32_t current_tick_count = xTaskGetTickCount();


}
